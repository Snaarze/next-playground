import type { Metadata } from "next";
import { Geist, Geist_Mono, Roboto } from "next/font/google";
import "./globals.css";
import NavBar from "./navBar";
import AuthProvider from "./auth/Provider";
import localFont from "next/font/local";
// by defining subset we are only size of the font size that we only used which optimize the storage or size of the font
// when using a variable font, there is no need to use customize the weight size
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const roboto = Roboto({
  subsets: ["latin"],
  weight: ["400", "500"],
});

// this function is customize font which doesnt exist in next google font
// const poppins = localFont({
//   // should be on the public folder
//   src: "../",
//   // use the css variable in order to use it
//   variable: "--font-poppins",
//   // we can declare this to the css file so we can use it as default classes in tailwind
//   // for example var(--font-poppins) just like the css variable
//   // so we can declare in on the className as font-poppins
// });

// when declaring metadata object it will automatically include it on the html when bundling the files
// search engines lookks for this meta tag
// we can modify each page of these metadata properties by defining/exporting it on the page that you want to modify their title,description and so on...
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
//   // used when we share our social media page
//   // there are alot of properties to used suchc as title, description and so on
//   // openGraph : {}
// };

// when there are route/ query parameters we need to use or generate a meta data by creating an function
// which should follow the naming convention generateMetadata and should return a promise of meta data

export async function generateMetadata(): Promise<Metadata> {
  //  fetch data then we can define their properties by overwriting the data with the fetched data from the database
  return {
    title: ".....fetchData",
  };
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased h-screen  flex flex-col`}
      >
        <AuthProvider>
          <NavBar />
          <main className="flex flex-1 w-full">
            <aside className="bg-slate-500 h-full w-78 pt-5 pl-20 shadow-[1px_5px_10px_rgba(0,0,0,0.25)] ">
              Sidebar
            </aside>
            {children}
          </main>
        </AuthProvider>
      </body>
    </html>
  );
}
